generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [pgvector(map: "vector")]
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String?
  version     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  documents   Document[]
  questions   ExamQuestion[]
  embeddings  CourseEmbedding[]
  
  @@index([title])
}

model Document {
  id          String   @id @default(cuid())
  courseId    String
  filename    String
  fileType    String   // 'pdf' or 'docx'
  fileUrl     String?  // URL to stored file
  content     String   @db.Text // Extracted text content
  metadata    Json?    // Additional metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  embeddings  DocumentEmbedding[]
  
  @@index([courseId])
}

model ExamQuestion {
  id          String   @id @default(cuid())
  courseId    String
  question    String   @db.Text
  answer      String?  @db.Text
  options     Json?    // For multiple choice questions
  type        String   // 'multiple_choice', 'essay', 'short_answer', etc.
  difficulty  String?  // 'easy', 'medium', 'hard'
  chapter     String?  // Chapter or section reference
  metadata    Json?    // Additional metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  embeddings  QuestionEmbedding[]
  
  @@index([courseId])
}

model CourseEmbedding {
  id          String                  @id @default(cuid())
  courseId    String
  content     String                  @db.Text
  embedding   Unsupported("vector")?
  metadata    Json?
  createdAt   DateTime                @default(now())
  
  course      Course                  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@index([courseId])
}

model DocumentEmbedding {
  id          String                  @id @default(cuid())
  documentId  String
  content     String                  @db.Text
  embedding   Unsupported("vector")?
  pageNumber  Int?
  metadata    Json?
  createdAt   DateTime                @default(now())
  
  document    Document                @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  @@index([documentId])
}

model QuestionEmbedding {
  id          String                  @id @default(cuid())
  questionId  String
  content     String                  @db.Text
  embedding   Unsupported("vector")?
  metadata    Json?
  createdAt   DateTime                @default(now())
  
  question    ExamQuestion            @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  @@index([questionId])
}